# utils.py
from datetime import datetime, timedelta
from typing import Dict, List, Any
import asyncio
import logging

logger = logging.getLogger(__name__)

class MarathonManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∞—Ñ–æ–Ω–∞–º–∏"""
    
    def __init__(self, db, ai_service, bot):
        self.db = db
        self.ai = ai_service
        self.bot = bot
    
    async def check_marathon_completions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∞—Ñ–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤—á–µ—Ä–∞
                yesterday = (datetime.now() - timedelta(days=1)).date()
                
                async with self.db.pool.acquire() as conn:
                    marathons = await conn.fetch('''
                        SELECT * FROM marathons
                        WHERE end_date = $1
                    ''', yesterday)
                    
                    for marathon in marathons:
                        await self._process_marathon_completion(dict(marathon))
                
            except Exception as e:
                logger.error(f"Error in marathon completion check: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 10:00
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
    
    async def _process_marathon_completion(self, marathon: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞"""
        marathon_id = marathon['marathon_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        async with self.db.pool.acquire() as conn:
            participants = await conn.fetch('''
                SELECT user_id FROM marathon_participants
                WHERE marathon_id = $1
            ''', marathon_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        for participant in participants:
            user_id = participant['user_id']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞
            stats = await self._get_marathon_user_stats(user_id, marathon_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = await self._generate_personal_report(stats, marathon)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            try:
                await self.bot.send_message(user_id, report, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"Failed to send report to user {user_id}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        group_stats = await self._get_marathon_group_stats(marathon_id)
        await self._send_group_statistics(marathon, group_stats)
    
    async def _get_marathon_user_stats(self, user_id: int, marathon_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ"""
        async with self.db.pool.acquire() as conn:
            stats = await conn.fetchrow('''
                SELECT 
                    COUNT(*) as sessions_count,
                    COALESCE(SUM(duration), 0) as total_duration,
                    COALESCE(AVG(rating), 0) as avg_rating,
                    COUNT(DISTINCT DATE(start_time)) as unique_days
                FROM sessions
                WHERE user_id = $1 AND marathon_id = $2 AND end_time IS NOT NULL
            ''', user_id, marathon_id)
            
            marathon_info = await self.db.get_marathon(marathon_id)
            progress = await self.db.get_marathon_progress(user_id, marathon_id)
            
            return {
                **dict(stats),
                **progress,
                'marathon_info': marathon_info
            }
    
    async def _generate_personal_report(self, stats: Dict[str, Any], marathon: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –æ—Ç –ò–ò
        ai_summary = await self.ai.generate_marathon_summary(stats, marathon)
        
        report = f"""üèÜ **–ú–∞—Ä–∞—Ñ–æ–Ω "{marathon['title']}" –∑–∞–≤–µ—Ä—à–µ–Ω!**

üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {stats['completed_days']}/{stats['total_days']}
‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {stats['sessions_count']}
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(stats['total_duration'])} –º–∏–Ω—É—Ç
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10

üí≠ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:**
{ai_summary}

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å üßò"""
        
        return report
    
    async def _get_marathon_group_stats(self, marathon_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞"""
        async with self.db.pool.acquire() as conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            total_participants = await conn.fetchval('''
                SELECT COUNT(*) FROM marathon_participants
                WHERE marathon_id = $1
            ''', marathon_id)
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–µ–¥–∏—Ç–∞—Ü–∏—é
            active_participants = await conn.fetchval('''
                SELECT COUNT(DISTINCT user_id) FROM sessions
                WHERE marathon_id = $1 AND end_time IS NOT NULL
            ''', marathon_id)
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏, –¥–æ—Å—Ç–∏–≥—à–∏–µ —Ü–µ–ª–∏
            marathon_info = await self.db.get_marathon(marathon_id)
            goal_achievers = await conn.fetchval('''
                WITH user_days AS (
                    SELECT 
                        user_id,
                        COUNT(DISTINCT DATE(start_time)) as days_completed
                    FROM sessions
                    WHERE marathon_id = $1 AND end_time IS NOT NULL
                    GROUP BY user_id
                )
                SELECT COUNT(*) FROM user_days
                WHERE days_completed >= $2
            ''', marathon_id, 
            (marathon_info['end_date'] - marathon_info['start_date']).days * 0.8)  # 80% –¥–Ω–µ–π
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await conn.fetchrow('''
                SELECT 
                    COUNT(*) as total_sessions,
                    COALESCE(SUM(duration), 0) as total_duration,
                    COALESCE(AVG(duration), 0) as avg_duration,
                    COALESCE(AVG(rating), 0) as avg_rating
                FROM sessions
                WHERE marathon_id = $1 AND end_time IS NOT NULL
            ''', marathon_id)
            
            return {
                'total_participants': total_participants,
                'active_participants': active_participants,
                'goal_achievers': goal_achievers,
                **dict(total_stats)
            }
    
    async def _send_group_statistics(self, marathon: Dict[str, Any], stats: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        completion_rate = (stats['active_participants'] / stats['total_participants'] * 100) if stats['total_participants'] > 0 else 0
        
        report = f"""üìä **–ò—Ç–æ–≥–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞ "{marathon['title']}"**

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_participants']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['active_participants']} ({completion_rate:.1f}%)
‚Ä¢ –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏: {stats['goal_achievers']}

üßò **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π:**
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(stats['total_duration'])} –º–∏–Ω—É—Ç
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {int(stats['avg_duration'])} –º–∏–Ω—É—Ç
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10

–ú–∞—Ä–∞—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        from config import Config
        config = Config()
        for admin_id in config.ADMIN_IDS:
            try:
                await self.bot.send_message(admin_id, report, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"Failed to send group stats to admin {admin_id}: {e}")

def format_duration(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    hours = minutes // 60
    mins = minutes % 60
    
    if hours > 0:
        return f"{hours} —á {mins} –º–∏–Ω"
    else:
        return f"{mins} –º–∏–Ω"

def get_meditation_streak(sessions: List[Dict[str, Any]]) -> int:
    """–ü–æ–¥—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π (–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)"""
    if not sessions:
        return 0
    
    dates = sorted([s['start_time'].date() for s in sessions], reverse=True)
    streak = 1
    
    for i in range(1, len(dates)):
        if dates[i] == dates[i-1] - timedelta(days=1):
            streak += 1
        else:
            break
    
    return streak

async def send_daily_reminder(bot, db):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤"""
    while True:
        try:
            current_time = datetime.now()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 9:00
            if current_time.hour == 9 and current_time.minute == 0:
                async with db.pool.acquire() as conn:
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
                    participants = await conn.fetch('''
                        SELECT DISTINCT mp.user_id, m.title, m.daily_goal
                        FROM marathon_participants mp
                        JOIN marathons m ON mp.marathon_id = m.marathon_id
                        WHERE m.start_date <= CURRENT_DATE 
                        AND m.end_date >= CURRENT_DATE
                    ''')
                    
                    for participant in participants:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π —Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
                        today_sessions = await conn.fetchval('''
                            SELECT COUNT(*) FROM sessions
                            WHERE user_id = $1 
                            AND DATE(start_time) = CURRENT_DATE
                            AND end_time IS NOT NULL
                        ''', participant['user_id'])
                        
                        if today_sessions < participant['daily_goal']:
                            remaining = participant['daily_goal'] - today_sessions
                            message = (
                                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Ä–∞—Ñ–æ–Ω–µ ¬´{participant['title']}¬ª\n\n"
                                f"–°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {remaining} –º–µ–¥–∏—Ç–∞—Ü–∏–π\n"
                                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ! üßò"
                            )
                            
                            try:
                                await bot.send_message(
                                    participant['user_id'], 
                                    message
                                )
                            except Exception as e:
                                logger.error(f"Failed to send reminder: {e}")
            
            # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)
            
        except Exception as e:
            logger.error(f"Error in daily reminder: {e}")
            await asyncio.sleep(60)

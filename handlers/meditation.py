# handlers/meditation.py
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime

from keyboards import get_main_keyboard, get_rating_keyboard
from states import MeditationStates

async def start_meditation(message: types.Message, db, config):
    """–ù–∞—á–∞–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    active_session = await db.get_active_session(user_id)
    if active_session:
        await message.answer(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è.\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_marathons = await db.get_user_marathons(user_id)
    active_marathon_id = None
    
    for marathon in user_marathons:
        if marathon['start_date'] <= datetime.now().date() <= marathon['end_date']:
            active_marathon_id = marathon['marathon_id']
            break
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    session_id = await db.create_session(user_id, active_marathon_id)
    
    await message.answer(
        "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞!\n\n"
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é¬ª.",
        reply_markup=get_main_keyboard(meditation_active=True, is_admin=message.from_user.id in config.ADMIN_IDS)
    )

async def end_meditation(message: types.Message, state: FSMContext, db, config):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    session = await db.get_active_session(user_id)
    if not session:
        await message.answer(
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in config.ADMIN_IDS)
        )
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    duration = await db.end_session(session['session_id'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(session_id=session['session_id'], duration=duration)
    
    await message.answer(
        f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:"
    )
    await state.set_state(MeditationStates.waiting_for_comment)

async def process_comment(message: types.Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = message.text
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await db.update_session_comment(data['session_id'], comment)
    await state.update_data(comment=comment)
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n\n"
        "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É –º–µ–¥–∏—Ç–∞—Ü–∏—é –æ—Ç 1 –¥–æ 10:",
        reply_markup=get_rating_keyboard()
    )
    await state.set_state(MeditationStates.waiting_for_rating)

async def process_rating(callback: types.CallbackQuery, state: FSMContext, db, ai, config):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
    rating = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    await db.update_session_rating(data['session_id'], rating)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –æ—Ç –ò–ò
    ai_feedback = await ai.generate_feedback(
        comment=data['comment'],
        duration=data['duration'],
        rating=rating
    )
    
    await callback.message.edit_text(
        f"üåü –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}/10\n\n"
        f"ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n{ai_feedback}",
        reply_markup=None
    )
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard(is_admin=callback.from_user.id in config.ADMIN_IDS)
    )
    
    await state.clear()
    await callback.answer()

# handlers/dialogue.py
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import json
import re

from keyboards import (get_main_keyboard, get_confirmation_keyboard, 
                      get_dialogue_keyboard, get_cancel_keyboard)
from states import DialogueStates
from prompts import SYSTEM_PROMPT, DIALOGUE_PROMPT, PARSE_MEDITATION_PROMPT

async def start_dialogue(message: types.Message, state: FSMContext, db, ai):
    """–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å AI"""
    user_id = message.from_user.id
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!*\n\n"
        "–Ø - –≤–∞—à –ª–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—å—é –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n"
        "‚Ä¢ –°–æ–≤–µ—Ç–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )
    
    await message.answer(
        welcome_text, 
        parse_mode="Markdown",
        reply_markup=get_dialogue_keyboard()
    )
    await state.set_state(DialogueStates.in_dialogue)

async def process_dialogue(message: types.Message, state: FSMContext, db, ai):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å AI"""
    user_id = message.from_user.id
    user_message = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
    history = await db.get_dialogue_history(user_id, limit=10)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = ""
    for msg in history:
        role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['is_user'] else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        context += f"{role}: {msg['content']}\n"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await ai.generate_dialogue_response(
        user_message,
        context,
        SYSTEM_PROMPT,
        DIALOGUE_PROMPT
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await db.save_dialogue_message(user_id, user_message, True)
    await db.save_dialogue_message(user_id, response, False)
    
    await message.answer(
        response, 
        reply_markup=get_dialogue_keyboard()
    )

async def manual_meditation_entry(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    await message.answer(
        "üìù *–ó–∞–ø–∏—Å—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏*\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º–µ–¥–∏—Ç–∞—Ü–∏—é –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "_'–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º 20 –º–∏–Ω—É—Ç, –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ, –æ—Ü–µ–Ω–∫–∞ 8'_\n"
        "_'–í—á–µ—Ä–∞ –≤–µ—á–µ—Ä–æ–º –≤ 22:00 –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª 30 –º–∏–Ω—É—Ç'_\n"
        "_'–ß–∞—Å –Ω–∞–∑–∞–¥ –∑–∞–∫–æ–Ω—á–∏–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é, —Å–∏–¥–µ–ª 20 –º–∏–Ω—É—Ç'_\n\n"
        "–Ø –ø–æ–π–º—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–º –∑–∞–ø–∏—Å—å.",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(DialogueStates.waiting_for_manual_entry)

async def process_manual_entry(message: types.Message, state: FSMContext, db, ai):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
            "‚ùå –ó–∞–ø–∏—Å—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard(is_admin=user_id in [])  # TODO: –ø–æ–ª—É—á–∏—Ç—å admin IDs
        )
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI
    parsed = await ai.parse_meditation_entry(message.text)
    
    try:
        data = json.loads(parsed)
    except:
        await message.answer(
            "ü§î –ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ —è–≤–Ω–æ.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª 30 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º'"
        )
        return
    
    if not data.get('confidence'):
        # –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        clarification = data.get('clarification_needed', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏')
        await message.answer(f"ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ {clarification}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(
        parsed_data=data,
        original_message=message.text
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = "‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    if data['date'] == datetime.now().strftime('%Y-%m-%d'):
        confirmation_text += f"üìÖ –î–∞—Ç–∞: –°–µ–≥–æ–¥–Ω—è\n"
    else:
        confirmation_text += f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
    
    confirmation_text += f"üïê –í—Ä–µ–º—è: {data['time']}\n"
    confirmation_text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –º–∏–Ω\n"
    
    if data.get('rating'):
        confirmation_text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {data['rating']}/10\n"
    
    if data.get('comment'):
        confirmation_text += f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
    
    confirmation_text += "\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    await message.answer(
        confirmation_text,
        parse_mode="Markdown",
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(DialogueStates.confirming_manual_entry)

async def confirm_manual_entry(callback: types.CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å—å"""
    if callback.data == "confirm_yes":
        data = await state.get_data()
        parsed = data['parsed_data']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str = parsed['date']
        time_str = parsed['time']
        datetime_str = f"{date_str} {time_str}"
        
        try:
            meditation_time = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
        except:
            meditation_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        session_id = await db.create_manual_session(
            user_id=callback.from_user.id,
            start_time=meditation_time,
            duration=parsed['duration'],
            rating=parsed.get('rating'),
            comment=parsed.get('comment')
        )
        
        await callback.message.edit_text(
            "‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
            f"üìÖ {meditation_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è±Ô∏è {parsed['duration']} –º–∏–Ω—É—Ç\n" +
            (f"‚≠ê –û—Ü–µ–Ω–∫–∞: {parsed['rating']}/10\n" if parsed.get('rating') else "") +
            (f"üí≠ {parsed['comment']}" if parsed.get('comment') else "")
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.answer(
            "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –º–µ–¥–∏—Ç–∞—Ü–∏–π.",
            reply_markup=get_main_keyboard()
        )
        
        await state.clear()
    else:
        await callback.message.edit_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    
    await callback.answer()

async def delete_meditation(message: types.Message, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    sessions = await db.get_user_sessions(user_id, limit=10)
    
    if not sessions:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π.")
        return
    
    text = "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    keyboard = InlineKeyboardBuilder()
    
    for i, session in enumerate(sessions, 1):
        date = session['start_time'].strftime("%d.%m.%Y %H:%M")
        button_text = f"{i}. {date} ({session['duration']} –º–∏–Ω)"
        
        text += f"{i}. {date}\n"
        text += f"   ‚è±Ô∏è {session['duration']} –º–∏–Ω | ‚≠ê {session['rating']}/10\n\n"
        
        keyboard.button(
            text=button_text,
            callback_data=f"delete_session_{session['session_id']}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard.as_markup())

async def confirm_delete_session(callback: types.CallbackQuery, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    if callback.data == "cancel_delete":
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()
        return
    
    session_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    session = await db.get_session_by_id(session_id)
    
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text = (
        "‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:*\n\n"
        f"üìÖ {session['start_time'].strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è±Ô∏è {session['duration']} –º–∏–Ω—É—Ç\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {session['rating']}/10\n"
    )
    
    if session['comment']:
        comment_preview = session['comment'][:50]
        if len(session['comment']) > 50:
            comment_preview += "..."
        text += f"üí≠ {comment_preview}\n"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{session_id}")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    keyboard.adjust(2)
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

async def process_delete_session(callback: types.CallbackQuery, db):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é"""
    session_id = int(callback.data.split("_")[2])
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    success = await db.delete_session(session_id, callback.from_user.id)
    
    if success:
        await callback.message.edit_text("‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    
    await callback.answer()

async def show_progress_analysis(callback: types.CallbackQuery, db, ai):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç AI"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await db.get_user_stats(user_id)
    monthly_stats = await db.get_monthly_stats(user_id)
    recent_sessions = await db.get_user_sessions(user_id, limit=10)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_data = {
        'total_sessions': stats['total_sessions'],
        'total_duration': stats['total_duration'],
        'avg_rating': stats['avg_rating'],
        'monthly_sessions': monthly_stats['sessions_count'],
        'monthly_avg_rating': monthly_stats['avg_rating'],
        'recent_sessions': recent_sessions
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI
    analysis = await ai.get_progress_analysis(analysis_data)
    
    text = "üìä *–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*\n\n"
    text += f"üßò –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {stats['total_sessions']}\n"
    text += f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']} –º–∏–Ω—É—Ç\n"
    text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10\n"
    text += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {monthly_stats['sessions_count']} –º–µ–¥–∏—Ç–∞—Ü–∏–π\n\n"
    text += f"ü§ñ *AI-–∞–Ω–∞–ª–∏–∑:*\n{analysis}"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    
    await callback.message.edit_text(
        text, 
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext, config):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    is_admin = callback.from_user.id in config.ADMIN_IDS
    
    await callback.message.edit_text(
        "üßò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=None
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=is_admin)
    )
    await callback.answer()

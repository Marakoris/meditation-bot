# handlers/history.py
from aiogram import types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta, date

from keyboards import get_history_keyboard, get_calendar_keyboard

async def meditation_history(message: types.Message, db):
    """–ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    user_id = message.from_user.id
    sessions = await db.get_user_sessions(user_id, limit=15)
    
    if not sessions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_user_stats(user_id)
    total_sessions = stats['total_sessions']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    monthly_stats = await db.get_monthly_stats(user_id)
    
    text = "üìñ *–ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π*\n\n"
    text += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {total_sessions}\n"
    text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {monthly_stats['sessions_count']}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {monthly_stats['avg_rating']:.1f}/10\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {stats['total_duration']} –º–∏–Ω\n\n"
    
    text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–µ–¥–∏—Ç–∞—Ü–∏–π:*\n\n"
    
    for session in sessions:
        date = session['start_time'].strftime("%d.%m.%Y %H:%M")
        text += f"üßò {date}\n"
        text += f"   ‚è±Ô∏è {session['duration']} –º–∏–Ω | ‚≠ê {session['rating']}/10\n"
        if session['comment']:
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment = session['comment']
            if len(comment) > 100:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ 100 —Å–∏–º–≤–æ–ª–æ–º
                cut_pos = comment[:100].rfind(' ')
                if cut_pos > 80:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 80 —Å–∏–º–≤–æ–ª–∞
                    comment = comment[:cut_pos] + "..."
                else:
                    comment = comment[:100] + "..."
            text += f"   üí≠ {comment}\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = get_history_keyboard()
    
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

async def show_calendar(callback: types.CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    now = datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏—Ç–∞—Ü–∏—è—Ö –∑–∞ –º–µ—Å—è—Ü
    sessions = await db.get_sessions_by_month(callback.from_user.id, now.year, now.month)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–Ω—è–º
    sessions_by_day = {}
    for session in sessions:
        day = session['start_time'].day
        if day not in sessions_by_day:
            sessions_by_day[day] = {
                'ratings': [],
                'count': 0,
                'total_duration': 0
            }
        sessions_by_day[day]['ratings'].append(session['rating'])
        sessions_by_day[day]['count'] += 1
        sessions_by_day[day]['total_duration'] += session['duration']
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    for day, data in sessions_by_day.items():
        data['avg_rating'] = sum(data['ratings']) / len(data['ratings'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–¥–∏—Ç–∞—Ü–∏–π*\n\n"
    text += "üü¢ 8-10 –±–∞–ª–ª–æ–≤ | üü° 5-7 –±–∞–ª–ª–æ–≤ | üî¥ 1-4 –±–∞–ª–ª–∞\n"
    text += "_–¶–∏—Ñ—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å_\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞
    if sessions:
        total_sessions = len(sessions)
        total_duration = sum(s['duration'] for s in sessions)
        avg_rating = sum(s['rating'] for s in sessions) / total_sessions
        days_with_practice = len(sessions_by_day)
        
        text += f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {now.strftime('%B %Y')}:*\n"
        text += f"‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏–π: {total_sessions}\n"
        text += f"‚Ä¢ –î–Ω–µ–π —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π: {days_with_practice}\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/10\n"
    
    keyboard = get_calendar_keyboard(now.year, now.month, sessions_by_day)
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

async def show_day_details(callback: types.CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    _, _, year, month, day = callback.data.split("_")
    selected_date = date(int(year), int(month), int(day))
    
    stats = await db.get_daily_stats(callback.from_user.id, selected_date)
    
    if stats['sessions_count'] == 0:
        await callback.answer("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π", show_alert=True)
        return
    
    text = f"üìÖ *–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∑–∞ {selected_date.strftime('%d.%m.%Y')}*\n\n"
    text += f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['sessions_count']}\n"
    text += f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']} –º–∏–Ω—É—Ç\n"
    text += f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10\n\n"
    
    for i, session in enumerate(stats['sessions'], 1):
        time = session['start_time'].strftime("%H:%M")
        text += f"*–°–µ—Å—Å–∏—è {i} ({time})*\n"
        text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session['duration']} –º–∏–Ω\n"
        text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {session['rating']}/10\n"
        if session['comment']:
            text += f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {session['comment']}\n"
        text += "\n"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="show_calendar")
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

async def navigate_calendar(callback: types.CallbackQuery, db):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    parts = callback.data.split("_")
    direction = parts[1]
    year = int(parts[2])
    month = int(parts[3])
    
    # –ò–∑–º–µ–Ω—è–µ–º –º–µ—Å—è—Ü
    if direction == "prev":
        month -= 1
        if month < 1:
            month = 12
            year -= 1
    else:  # next
        month += 1
        if month > 12:
            month = 1
            year += 1
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü
    sessions = await db.get_sessions_by_month(callback.from_user.id, year, month)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–Ω—è–º
    sessions_by_day = {}
    for session in sessions:
        day = session['start_time'].day
        if day not in sessions_by_day:
            sessions_by_day[day] = {
                'ratings': [],
                'count': 0,
                'total_duration': 0
            }
        sessions_by_day[day]['ratings'].append(session['rating'])
        sessions_by_day[day]['count'] += 1
        sessions_by_day[day]['total_duration'] += session['duration']
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    for day, data in sessions_by_day.items():
        data['avg_rating'] = sum(data['ratings']) / len(data['ratings'])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    month_names = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    
    text = f"üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–¥–∏—Ç–∞—Ü–∏–π - {month_names[month]} {year}*\n\n"
    text += "üü¢ 8-10 –±–∞–ª–ª–æ–≤ | üü° 5-7 –±–∞–ª–ª–æ–≤ | üî¥ 1-4 –±–∞–ª–ª–∞\n\n"
    
    if sessions:
        total_sessions = len(sessions)
        total_duration = sum(s['duration'] for s in sessions)
        avg_rating = sum(s['rating'] for s in sessions) / total_sessions
        days_with_practice = len(sessions_by_day)
        
        text += f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞:*\n"
        text += f"‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏–π: {total_sessions}\n"
        text += f"‚Ä¢ –î–Ω–µ–π —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π: {days_with_practice}\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/10\n"
    else:
        text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –º–µ–¥–∏—Ç–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ\n"
    
    keyboard = get_calendar_keyboard(year, month, sessions_by_day)
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

async def show_week_history(callback: types.CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é"""
    user_id = callback.from_user.id
    week_ago = datetime.now() - timedelta(days=7)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    sessions = await db.get_user_sessions(user_id, limit=50)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ, –ø–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º
    week_sessions = [s for s in sessions if s['start_time'] >= week_ago]
    
    if not week_sessions:
        await callback.answer("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –±—ã–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π", show_alert=True)
        return
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_duration = sum(s['duration'] for s in week_sessions)
    avg_rating = sum(s['rating'] for s in week_sessions) / len(week_sessions)
    days_with_meditation = len(set(s['start_time'].date() for s in week_sessions))
    
    text = "üìä *–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é*\n\n"
    text += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {len(week_sessions)}\n"
    text += f"‚Ä¢ –î–Ω–µ–π —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π: {days_with_meditation}/7\n"
    text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω—É—Ç\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/10\n\n"
    
    text += "*–î–µ—Ç–∞–ª–∏:*\n"
    for session in week_sessions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        date = session['start_time'].strftime("%d.%m %H:%M")
        text += f"‚Ä¢ {date} - {session['duration']} –º–∏–Ω, ‚≠ê {session['rating']}/10\n"
    
    if len(week_sessions) > 10:
        text += f"\n_...–∏ –µ—â–µ {len(week_sessions) - 10} –º–µ–¥–∏—Ç–∞—Ü–∏–π_"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_history")
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

async def back_to_history(callback: types.CallbackQuery, db):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    user_id = callback.from_user.id
    sessions = await db.get_user_sessions(user_id, limit=15)
    
    if not sessions:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_user_stats(user_id)
    total_sessions = stats['total_sessions']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    monthly_stats = await db.get_monthly_stats(user_id)
    
    text = "üìñ *–ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π*\n\n"
    text += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {total_sessions}\n"
    text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {monthly_stats['sessions_count']}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {monthly_stats['avg_rating']:.1f}/10\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {stats['total_duration']} –º–∏–Ω\n\n"
    
    text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–µ–¥–∏—Ç–∞—Ü–∏–π:*\n\n"
    
    for session in sessions:
        date = session['start_time'].strftime("%d.%m.%Y %H:%M")
        text += f"üßò {date}\n"
        text += f"   ‚è±Ô∏è {session['duration']} –º–∏–Ω | ‚≠ê {session['rating']}/10\n"
        if session['comment']:
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment = session['comment']
            if len(comment) > 100:
                cut_pos = comment[:100].rfind(' ')
                if cut_pos > 80:
                    comment = comment[:cut_pos] + "..."
                else:
                    comment = comment[:100] + "..."
            text += f"   üí≠ {comment}\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = get_history_keyboard()
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

async def ignore_callback(callback: types.CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    await callback.answer()

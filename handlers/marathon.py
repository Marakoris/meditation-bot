# handlers/marathon.py
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime

from keyboards import get_main_keyboard
from states import MeditationStates

async def join_marathon(message: types.Message, db):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∞—Ñ–æ–Ω—ã
    marathons = await db.get_active_marathons()
    
    if not marathons:
        await message.answer(
            "üö´ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤.\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
    text = "üèÉ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∞—Ñ–æ–Ω—ã:\n\n"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    for marathon in marathons:
        text += f"üìå *{marathon['title']}*\n"
        text += f"üìÖ {marathon['start_date']} - {marathon['end_date']}\n"
        text += f"üéØ –¶–µ–ª—å: {marathon['daily_goal']} –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å\n"
        text += f"üìù {marathon['description']}\n\n"
        
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ ¬´{marathon['title']}¬ª",
                callback_data=f"join_marathon_{marathon['marathon_id']}"
            )
        ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def process_marathon_join(callback: types.CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É"""
    marathon_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    is_participant = await db.is_marathon_participant(user_id, marathon_id)
    if is_participant:
        await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ!", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await db.add_marathon_participant(user_id, marathon_id)
    marathon = await db.get_marathon(marathon_id)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É ¬´{marathon['title']}¬ª!\n\n"
        f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {marathon['daily_goal']} –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å\n"
        f"üìÖ –î–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞: {(marathon['end_date'] - datetime.now().date()).days} –¥–Ω–µ–π\n\n"
        "–£–¥–∞—á–∏ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ! üßò"
    )
    await callback.answer()

async def create_marathon(message: types.Message, state: FSMContext, config):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤.")
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞:")
    await state.set_state(MeditationStates.waiting_for_marathon_title)

async def process_marathon_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞:")
    await state.set_state(MeditationStates.waiting_for_marathon_description)

async def process_marathon_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì"
    )
    await state.set_state(MeditationStates.waiting_for_marathon_dates)

async def process_marathon_dates(message: types.Message, state: FSMContext):
    try:
        dates = message.text.split(" - ")
        start_date = datetime.strptime(dates[0], "%d.%m.%Y").date()
        end_date = datetime.strptime(dates[1], "%d.%m.%Y").date()
        
        await state.update_data(start_date=start_date, end_date=end_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å:")
        await state.set_state(MeditationStates.waiting_for_marathon_goal)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

async def process_marathon_goal(message: types.Message, state: FSMContext, db):
    try:
        daily_goal = int(message.text)
        data = await state.get_data()
        
        marathon_id = await db.create_marathon(
            title=data['title'],
            description=data['description'],
            start_date=data['start_date'],
            end_date=data['end_date'],
            daily_goal=daily_goal
        )
        
        await message.answer(
            f"‚úÖ –ú–∞—Ä–∞—Ñ–æ–Ω ¬´{data['title']}¬ª —Å–æ–∑–¥–∞–Ω!\n\n"
            f"ID: {marathon_id}\n"
            f"–î–∞—Ç—ã: {data['start_date']} - {data['end_date']}\n"
            f"–¶–µ–ª—å: {daily_goal} –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å",
            reply_markup=get_main_keyboard(is_admin=True)
        )
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# keyboards.py
from aiogram import types
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

def get_main_keyboard(meditation_active: bool = False, is_admin: bool = False) -> types.ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    
    if meditation_active:
        builder.button(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
    else:
        builder.button(text="üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
    
    builder.button(text="üèÉ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É")
    builder.button(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π")
    
    if is_admin:
        builder.button(text="üë®‚Äçüíº –°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω")
    
    builder.adjust(2, 2, 1)
    
    return builder.as_markup(resize_keyboard=True)

def get_rating_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ 10
    for i in range(1, 11):
        builder.button(text=str(i), callback_data=f"rating_{i}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    builder.adjust(5, 5)
    
    return builder.as_markup()

def get_cancel_keyboard() -> types.ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    return builder.as_markup(resize_keyboard=True)

def get_marathon_admin_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞", callback_data="marathon_stats")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="marathon_participants")
    builder.button(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="marathon_broadcast")
    builder.button(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="marathon_finish")
    
    builder.adjust(2, 2)
    
    return builder.as_markup()

def get_confirmation_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚úÖ –î–∞", callback_data="confirm_yes")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")
    
    builder.adjust(2)
    
    return builder.as_markup()

def get_history_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="show_calendar")
    builder.button(text="üìä –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="history_week")
    builder.button(text="üìà –ó–∞ –º–µ—Å—è—Ü", callback_data="history_month")
    
    builder.adjust(3)
    
    return builder.as_markup()

def get_calendar_keyboard(year: int, month: int, user_sessions: dict = None) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    from calendar import monthrange
    
    builder = InlineKeyboardBuilder()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name_ru = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    builder.button(text="‚óÄÔ∏è", callback_data=f"cal_prev_{year}_{month}")
    builder.button(text=f"{month_name_ru[month]} {year}", callback_data="cal_ignore")
    builder.button(text="‚ñ∂Ô∏è", callback_data=f"cal_next_{year}_{month}")
    builder.adjust(3)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    for day in days:
        builder.button(text=day, callback_data="cal_ignore")
    builder.adjust(3, 7)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    first_day, days_in_month = monthrange(year, month)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
    for _ in range(first_day):
        builder.button(text=" ", callback_data="cal_ignore")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π
    for day in range(1, days_in_month + 1):
        if user_sessions and day in user_sessions:
            # –ï—Å—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            avg_rating = user_sessions[day]['avg_rating']
            count = user_sessions[day]['count']
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
            if avg_rating >= 8:
                emoji = "üü¢"
            elif avg_rating >= 5:
                emoji = "üü°"  
            else:
                emoji = "üî¥"
            
            # –§–æ—Ä–º–∞—Ç: —ç–º–æ–¥–∑–∏ + –¥–µ–Ω—å (+ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1)
            if count > 1:
                text = f"{emoji}{day}({count})"
            else:
                text = f"{emoji}{day}"
        else:
            # –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å –±–µ–∑ –º–µ–¥–∏—Ç–∞—Ü–∏–π
            text = str(day)
        
        builder.button(text=text, callback_data=f"cal_day_{year}_{month}_{day}")
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
    total_buttons = 3 + 7 + first_day + days_in_month
    rows = [3, 7] + [7] * ((total_buttons - 10 + 6) // 7)
    builder.adjust(*rows)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –≤–Ω–∏–∑—É
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞", callback_data=f"cal_month_stats_{year}_{month}")
    builder.adjust(*rows, 1)
    
    return builder.as_markup()

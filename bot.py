# bot.py
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from database import Database
from keyboards import get_main_keyboard, get_rating_keyboard
from ai_service import AIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class MeditationStates(StatesGroup):
    waiting_for_comment = State()
    waiting_for_rating = State()
    waiting_for_marathon_title = State()
    waiting_for_marathon_description = State()
    waiting_for_marathon_dates = State()
    waiting_for_marathon_goal = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config = Config()
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = Database(config.DATABASE_URL)
ai = AIService(config.AI_API_KEY, config.AI_SERVICE, config.AI_MODEL)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    await db.create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    is_admin = user.id in config.ADMIN_IDS
    
    await message.answer(
        f"üßò‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–π, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=is_admin)
    )

@dp.message(F.text == "üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def start_meditation(message: types.Message):
    """–ù–∞—á–∞–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    active_session = await db.get_active_session(user_id)
    if active_session:
        await message.answer(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è.\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_marathons = await db.get_user_marathons(user_id)
    active_marathon_id = None
    
    for marathon in user_marathons:
        if marathon['start_date'] <= datetime.now().date() <= marathon['end_date']:
            active_marathon_id = marathon['marathon_id']
            break
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    session_id = await db.create_session(user_id, active_marathon_id)
    
    await message.answer(
        "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞!\n\n"
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é¬ª.",
        reply_markup=get_main_keyboard(meditation_active=True, is_admin=message.from_user.id in config.ADMIN_IDS)
    )

@dp.message(F.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def end_meditation(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    session = await db.get_active_session(user_id)
    if not session:
        await message.answer(
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard(is_admin=message.from_user.id in config.ADMIN_IDS)
        )
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    duration = await db.end_session(session['session_id'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(session_id=session['session_id'], duration=duration)
    
    await message.answer(
        f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:"
    )
    await state.set_state(MeditationStates.waiting_for_comment)

@dp.message(MeditationStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = message.text
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await db.update_session_comment(data['session_id'], comment)
    await state.update_data(comment=comment)
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n\n"
        "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É –º–µ–¥–∏—Ç–∞—Ü–∏—é –æ—Ç 1 –¥–æ 10:",
        reply_markup=get_rating_keyboard()
    )
    await state.set_state(MeditationStates.waiting_for_rating)

@dp.callback_query(MeditationStates.waiting_for_rating, F.data.startswith("rating_"))
async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
    rating = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    await db.update_session_rating(data['session_id'], rating)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –æ—Ç –ò–ò
    ai_feedback = await ai.generate_feedback(
        comment=data['comment'],
        duration=data['duration'],
        rating=rating
    )
    
    await callback.message.edit_text(
        f"üåü –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}/10\n\n"
        f"ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n{ai_feedback}",
        reply_markup=None
    )
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard(is_admin=callback.from_user.id in config.ADMIN_IDS)
    )
    
    await state.clear()
    await callback.answer()

@dp.message(F.text == "üèÉ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É")
async def join_marathon(message: types.Message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∞—Ñ–æ–Ω—ã
    marathons = await db.get_active_marathons()
    
    if not marathons:
        await message.answer(
            "üö´ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤.\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
    text = "üèÉ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∞—Ñ–æ–Ω—ã:\n\n"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    for marathon in marathons:
        text += f"üìå *{marathon['title']}*\n"
        text += f"üìÖ {marathon['start_date']} - {marathon['end_date']}\n"
        text += f"üéØ –¶–µ–ª—å: {marathon['daily_goal']} –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å\n"
        text += f"üìù {marathon['description']}\n\n"
        
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ ¬´{marathon['title']}¬ª",
                callback_data=f"join_marathon_{marathon['marathon_id']}"
            )
        ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("join_marathon_"))
async def process_marathon_join(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É"""
    marathon_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    is_participant = await db.is_marathon_participant(user_id, marathon_id)
    if is_participant:
        await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ!", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await db.add_marathon_participant(user_id, marathon_id)
    marathon = await db.get_marathon(marathon_id)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É ¬´{marathon['title']}¬ª!\n\n"
        f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {marathon['daily_goal']} –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å\n"
        f"üìÖ –î–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞: {(marathon['end_date'] - datetime.now().date()).days} –¥–Ω–µ–π\n\n"
        "–£–¥–∞—á–∏ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ! üßò"
    )
    await callback.answer()

@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def my_progress(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = await db.get_user_stats(user_id)
    
    text = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n"
    text += f"üßò –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {stats['total_sessions']}\n"
    text += f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']} –º–∏–Ω—É—Ç\n"
    text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10\n\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞–º
    marathons = await db.get_user_marathons(user_id)
    if marathons:
        text += "*–ú–∞—Ä–∞—Ñ–æ–Ω—ã:*\n"
        for marathon in marathons:
            progress = await db.get_marathon_progress(user_id, marathon['marathon_id'])
            text += f"\nüìå {marathon['title']}\n"
            text += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress['completed_days']}/{progress['total_days']} –¥–Ω–µ–π\n"
            text += f"   –ú–µ–¥–∏—Ç–∞—Ü–∏–π: {progress['sessions_count']}\n"
    
    await message.answer(text, parse_mode="Markdown")

@dp.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π")
async def meditation_history(message: types.Message):
    """–ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    user_id = message.from_user.id
    sessions = await db.get_user_sessions(user_id, limit=15)
    
    if not sessions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_user_stats(user_id)
    total_sessions = stats['total_sessions']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    monthly_stats = await db.get_monthly_stats(user_id)
    
    text = "üìñ *–ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π*\n\n"
    text += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {total_sessions}\n"
    text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {monthly_stats['sessions_count']}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {monthly_stats['avg_rating']:.1f}/10\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {stats['total_duration']} –º–∏–Ω\n\n"
    
    text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–µ–¥–∏—Ç–∞—Ü–∏–π:*\n\n"
    
    for session in sessions:
        date = session['start_time'].strftime("%d.%m.%Y %H:%M")
        text += f"üßò {date}\n"
        text += f"   ‚è±Ô∏è {session['duration']} –º–∏–Ω | ‚≠ê {session['rating']}/10\n"
        if session['comment']:
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment = session['comment']
            if len(comment) > 100:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ 100 —Å–∏–º–≤–æ–ª–æ–º
                cut_pos = comment[:100].rfind(' ')
                if cut_pos > 80:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 80 —Å–∏–º–≤–æ–ª–∞
                    comment = comment[:cut_pos] + "..."
                else:
                    comment = comment[:100] + "..."
            text += f"   üí≠ {comment}\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = get_history_keyboard()
    
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.message(F.text == "üë®‚Äçüíº –°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω")
async def create_marathon(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤.")
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞:")
    await state.set_state(MeditationStates.waiting_for_marathon_title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞
@dp.message(MeditationStates.waiting_for_marathon_title)
async def process_marathon_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞:")
    await state.set_state(MeditationStates.waiting_for_marathon_description)

@dp.message(MeditationStates.waiting_for_marathon_description)
async def process_marathon_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì"
    )
    await state.set_state(MeditationStates.waiting_for_marathon_dates)

@dp.message(MeditationStates.waiting_for_marathon_dates)
async def process_marathon_dates(message: types.Message, state: FSMContext):
    try:
        dates = message.text.split(" - ")
        start_date = datetime.strptime(dates[0], "%d.%m.%Y").date()
        end_date = datetime.strptime(dates[1], "%d.%m.%Y").date()
        
        await state.update_data(start_date=start_date, end_date=end_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å:")
        await state.set_state(MeditationStates.waiting_for_marathon_goal)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message(MeditationStates.waiting_for_marathon_goal)
async def process_marathon_goal(message: types.Message, state: FSMContext):
    try:
        daily_goal = int(message.text)
        data = await state.get_data()
        
        marathon_id = await db.create_marathon(
            title=data['title'],
            description=data['description'],
            start_date=data['start_date'],
            end_date=data['end_date'],
            daily_goal=daily_goal
        )
        
        await message.answer(
            f"‚úÖ –ú–∞—Ä–∞—Ñ–æ–Ω ¬´{data['title']}¬ª —Å–æ–∑–¥–∞–Ω!\n\n"
            f"ID: {marathon_id}\n"
            f"–î–∞—Ç—ã: {data['start_date']} - {data['end_date']}\n"
            f"–¶–µ–ª—å: {daily_goal} –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å",
            reply_markup=get_main_keyboard(is_admin=True)
        )
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await db.init()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    from utils import MarathonManager, send_daily_reminder
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
    marathon_manager = MarathonManager(db, ai, bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(marathon_manager.check_marathon_completions())
    asyncio.create_task(send_daily_reminder(bot, db))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query(F.data == "show_calendar")
async def show_calendar(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    from datetime import datetime
    now = datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏—Ç–∞—Ü–∏—è—Ö –∑–∞ –º–µ—Å—è—Ü
    sessions = await db.get_sessions_by_month(callback.from_user.id, now.year, now.month)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –ø–æ –¥–Ω—è–º
    ratings_by_day = {}
    for session in sessions:
        day = session['start_time'].day
        if day not in ratings_by_day:
            ratings_by_day[day] = []
        ratings_by_day[day].append(session['rating'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    text = "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–¥–∏—Ç–∞—Ü–∏–π*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    text += "üü¢ 8-10 –±–∞–ª–ª–æ–≤ | üü° 5-7 –±–∞–ª–ª–æ–≤ | üî¥ 1-4 –±–∞–ª–ª–∞\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ —Å –º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏
    if ratings_by_day:
        text += "*–î–Ω–∏ —Å –º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏:*\n"
        for day in sorted(ratings_by_day.keys()):
            avg_rating = sum(ratings_by_day[day]) / len(ratings_by_day[day])
            count = len(ratings_by_day[day])
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
            if avg_rating >= 8:
                emoji = "üü¢"
            elif avg_rating >= 5:
                emoji = "üü°"
            else:
                emoji = "üî¥"
            
            text += f"{emoji} {day} —á–∏—Å–ª–æ - {count} –º–µ–¥–∏—Ç–∞—Ü–∏–π (—Å—Ä. –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f})\n"
    else:
        text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –º–µ–¥–∏—Ç–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ"
    
    keyboard = get_calendar_keyboard(now.year, now.month)
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("cal_day_"))
async def show_day_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    _, _, year, month, day = callback.data.split("_")
    from datetime import date
    selected_date = date(int(year), int(month), int(day))
    
    stats = await db.get_daily_stats(callback.from_user.id, selected_date)
    
    if stats['sessions_count'] == 0:
        await callback.answer("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π", show_alert=True)
        return
    
    text = f"üìÖ *–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∑–∞ {selected_date.strftime('%d.%m.%Y')}*\n\n"
    text += f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['sessions_count']}\n"
    text += f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']} –º–∏–Ω—É—Ç\n"
    text += f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10\n\n"
    
    for i, session in enumerate(stats['sessions'], 1):
        time = session['start_time'].strftime("%H:%M")
        text += f"*–°–µ—Å—Å–∏—è {i} ({time})*\n"
        text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session['duration']} –º–∏–Ω\n"
        text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {session['rating']}/10\n"
        if session['comment']:
            text += f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {session['comment']}\n"
        text += "\n"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="show_calendar")
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("cal_prev_") | F.data.startswith("cal_next_"))
async def navigate_calendar(callback: types.CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    parts = callback.data.split("_")
    direction = parts[1]
    year = int(parts[2])
    month = int(parts[3])
    
    # –ò–∑–º–µ–Ω—è–µ–º –º–µ—Å—è—Ü
    if direction == "prev":
        month -= 1
        if month < 1:
            month = 12
            year -= 1
    else:  # next
        month += 1
        if month > 12:
            month = 1
            year += 1
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü
    sessions = await db.get_sessions_by_month(callback.from_user.id, year, month)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    month_names = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    
    text = f"üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–¥–∏—Ç–∞—Ü–∏–π - {month_names[month]} {year}*\n\n"
    
    if sessions:
        text += f"–ú–µ–¥–∏—Ç–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(sessions)}\n"
    else:
        text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –º–µ–¥–∏—Ç–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ\n"
    
    keyboard = get_calendar_keyboard(year, month)
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "history_week")
async def show_week_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é"""
    from datetime import datetime, timedelta
    
    user_id = callback.from_user.id
    week_ago = datetime.now() - timedelta(days=7)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    sessions = await db.get_user_sessions(user_id, limit=50)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ, –ø–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º
    week_sessions = [s for s in sessions if s['start_time'] >= week_ago]
    
    if not week_sessions:
        await callback.answer("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –±—ã–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π", show_alert=True)
        return
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_duration = sum(s['duration'] for s in week_sessions)
    avg_rating = sum(s['rating'] for s in week_sessions) / len(week_sessions)
    days_with_meditation = len(set(s['start_time'].date() for s in week_sessions))
    
    text = "üìä *–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é*\n\n"
    text += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {len(week_sessions)}\n"
    text += f"‚Ä¢ –î–Ω–µ–π —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π: {days_with_meditation}/7\n"
    text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω—É—Ç\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/10\n\n"
    
    text += "*–î–µ—Ç–∞–ª–∏:*\n"
    for session in week_sessions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        date = session['start_time'].strftime("%d.%m %H:%M")
        text += f"‚Ä¢ {date} - {session['duration']} –º–∏–Ω, ‚≠ê {session['rating']}/10\n"
    
    if len(week_sessions) > 10:
        text += f"\n_...–∏ –µ—â–µ {len(week_sessions) - 10} –º–µ–¥–∏—Ç–∞—Ü–∏–π_"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_history")
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "cal_ignore")
async def ignore_callback(callback: types.CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    await callback.answer()

if __name__ == "__main__":
    asyncio.run(main())

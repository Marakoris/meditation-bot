# bot.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from database import Database
from keyboards import get_main_keyboard
from ai_service import AIService
from states import MeditationStates

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers import meditation, history, marathon

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config = Config()
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = Database(config.DATABASE_URL)
ai = AIService(config.AI_API_KEY, config.AI_SERVICE, config.AI_MODEL)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    await db.create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    is_admin = user.id in config.ADMIN_IDS
    
    await message.answer(
        f"üßò‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–π, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=is_admin)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π
@dp.message(F.text == "üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def handle_start_meditation(message: types.Message):
    await meditation.start_meditation(message, db, config)

@dp.message(F.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def handle_end_meditation(message: types.Message, state: FSMContext):
    await meditation.end_meditation(message, state, db, config)

@dp.message(MeditationStates.waiting_for_comment)
async def handle_process_comment(message: types.Message, state: FSMContext):
    await meditation.process_comment(message, state, db)

@dp.callback_query(MeditationStates.waiting_for_rating, F.data.startswith("rating_"))
async def handle_process_rating(callback: types.CallbackQuery, state: FSMContext):
    await meditation.process_rating(callback, state, db, ai, config)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
@dp.message(F.text == "üèÉ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É")
async def handle_join_marathon(message: types.Message):
    await marathon.join_marathon(message, db)

@dp.callback_query(F.data.startswith("join_marathon_"))
async def handle_process_marathon_join(callback: types.CallbackQuery):
    await marathon.process_marathon_join(callback, db)

@dp.message(F.text == "üë®‚Äçüíº –°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω")
async def handle_create_marathon(message: types.Message, state: FSMContext):
    await marathon.create_marathon(message, state, config)

@dp.message(MeditationStates.waiting_for_marathon_title)
async def handle_marathon_title(message: types.Message, state: FSMContext):
    await marathon.process_marathon_title(message, state)

@dp.message(MeditationStates.waiting_for_marathon_description)
async def handle_marathon_description(message: types.Message, state: FSMContext):
    await marathon.process_marathon_description(message, state)

@dp.message(MeditationStates.waiting_for_marathon_dates)
async def handle_marathon_dates(message: types.Message, state: FSMContext):
    await marathon.process_marathon_dates(message, state)

@dp.message(MeditationStates.waiting_for_marathon_goal)
async def handle_marathon_goal(message: types.Message, state: FSMContext):
    await marathon.process_marathon_goal(message, state, db)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def my_progress(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = await db.get_user_stats(user_id)
    
    text = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n"
    text += f"üßò –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {stats['total_sessions']}\n"
    text += f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']} –º–∏–Ω—É—Ç\n"
    text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']:.1f}/10\n\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞–º
    marathons = await db.get_user_marathons(user_id)
    if marathons:
        text += "*–ú–∞—Ä–∞—Ñ–æ–Ω—ã:*\n"
        for marathon in marathons:
            progress = await db.get_marathon_progress(user_id, marathon['marathon_id'])
            text += f"\nüìå {marathon['title']}\n"
            text += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress['completed_days']}/{progress['total_days']} –¥–Ω–µ–π\n"
            text += f"   –ú–µ–¥–∏—Ç–∞—Ü–∏–π: {progress['sessions_count']}\n"
    
    await message.answer(text, parse_mode="Markdown")

@dp.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–π")
async def handle_meditation_history(message: types.Message):
    await history.meditation_history(message, db)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query(F.data == "show_calendar")
async def handle_show_calendar(callback: types.CallbackQuery):
    await history.show_calendar(callback, db)

@dp.callback_query(F.data.startswith("cal_day_"))
async def handle_show_day_details(callback: types.CallbackQuery):
    await history.show_day_details(callback, db)

@dp.callback_query(F.data.startswith("cal_prev_") | F.data.startswith("cal_next_"))
async def handle_navigate_calendar(callback: types.CallbackQuery):
    await history.navigate_calendar(callback, db)

@dp.callback_query(F.data == "history_week")
async def handle_show_week_history(callback: types.CallbackQuery):
    await history.show_week_history(callback, db)

@dp.callback_query(F.data == "history_month")
async def handle_show_month_history(callback: types.CallbackQuery):
    await history.show_month_history(callback, db)

@dp.callback_query(F.data == "cal_ignore")
async def handle_ignore_callback(callback: types.CallbackQuery):
    await history.ignore_callback(callback)

@dp.callback_query(F.data == "back_to_history")
async def handle_back_to_history(callback: types.CallbackQuery):
    await history.back_to_history(callback, db)

@dp.callback_query(F.data.startswith("cal_month_stats_"))
async def handle_month_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü"""
    parts = callback.data.split("_")
    year = int(parts[3])
    month = int(parts[4])
    
    sessions = await db.get_sessions_by_month(callback.from_user.id, year, month)
    
    if not sessions:
        await callback.answer("–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—ã–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π", show_alert=True)
        return
    
    # –°—á–∏—Ç–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_duration = sum(s['duration'] for s in sessions)
    avg_rating = sum(s['rating'] for s in sessions) / len(sessions)
    days_with_practice = len(set(s['start_time'].date() for s in sessions))
    
    # –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∏ –∫–æ—Ä–æ—Ç–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è
    longest = max(sessions, key=lambda x: x['duration'])
    shortest = min(sessions, key=lambda x: x['duration'])
    
    # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è –æ—Ü–µ–Ω–∫–∞
    best = max(sessions, key=lambda x: x['rating'])
    worst = min(sessions, key=lambda x: x['rating'])
    
    month_names = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    text = f"üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_names[month]} {year}*\n\n"
    text += f"üßò *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {len(sessions)}\n"
    text += f"‚Ä¢ –î–Ω–µ–π —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π: {days_with_practice}\n"
    text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω—É—Ç\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {total_duration // len(sessions)} –º–∏–Ω—É—Ç\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/10\n\n"
    
    text += f"üìà *–†–µ–∫–æ—Ä–¥—ã –º–µ—Å—è—Ü–∞:*\n"
    text += f"‚Ä¢ –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è: {longest['duration']} –º–∏–Ω ({longest['start_time'].strftime('%d.%m')})\n"
    text += f"‚Ä¢ –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è: {shortest['duration']} –º–∏–Ω ({shortest['start_time'].strftime('%d.%m')})\n"
    text += f"‚Ä¢ –õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞: {best['rating']}/10 ({best['start_time'].strftime('%d.%m')})\n"
    text += f"‚Ä¢ –•—É–¥—à–∞—è –æ—Ü–µ–Ω–∫–∞: {worst['rating']}/10 ({worst['start_time'].strftime('%d.%m')})\n"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="show_calendar")
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await db.init()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    from utils import MarathonManager, send_daily_reminder
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
    marathon_manager = MarathonManager(db, ai, bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(marathon_manager.check_marathon_completions())
    asyncio.create_task(send_daily_reminder(bot, db))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
